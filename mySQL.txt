
22:38


19

同步锁是谁?
对于非static方法,同步锁就是this。
对于static方法,我们使用当前方法所在类的字节码对象(类名.class)。


java.util.function.Predicate<T>接口中不包含那个方法(   )
(2分)  test()//or() //get()//and()

4/1日 自习计划
1.生僻单词汇总记忆
2.SE阶段的随手记和笔记过一遍
3.预习新课
4.做题

mySQL服务启动类型： 自动 vs 手动？？
数组不能使用迭代器？？ 迭代器的底层时增强for ,单列集合和数组都可以使用，但数组不能使用跌打器？

插入数据时报错：  --》字符集错误   修改默认值
错误代码： 1366
Incorrect string value: '\xE5\xBC\x80\xE5\x8F\x91...' for column 'NAME' at row 1

ssm//springboot //小工具
框架设计器（各表间的外键关系） --》更换序列号

Day15
分页查询
select * from student3 limit  (curPage-1)*pageSize, pageSize.

备份数据库：cmd 方式时导入    要先创建数据库名，再使用状态，最后再导入
	  mySQL方式导入时，直接导入，不需要创建数据库名

mySQL 默认当前时间    ？ timestamp字段类型 default    current_timestamp
设置主键自增的起点数字？ 设起始值   ALTER TABLE 表名 AUTO_INCREMENT=起始值;

排序 Order by 字段名 desc/asc

前车之鉴：
1.create table product ()-->空格不能多
2.创建数据库和表时使用默认字符集   ->安装目录下my.ini 文件中 两处修改 default-character-set
3.外键标识  显示在表数据栏内，而非select结果中
4.主键PRIMARY KEY，外键：FOREIGN KEY
5.创建表时 create table  .....



Day16
1.左连接时 表名颠倒写 结果是否和右连接相同？---》相同结果	
 
e.* ->e表中的所有字段

事务处理能在SQLyog上演示效果吗
事务处理的用途，代码中？？
不可重复读：在同一事务中，两次读取结果相同，不发生改变，即使数据库已改变
串行化隔离级别：一个事务未提交，第二个事务一直等待...	
什么是事务？？
数据库服务权限分类：xxx	

ctrl+c 退出mysql控制台版，同exit
root能授权超级用户吗？

数据库权限授权与撤销命令要一致？？授权几次撤销几次？
普通用户可以自己改密码吗？

中间表可以有两个主键  X  =》联合主键        联合主键 vs 复合主键

distinct   不重复关键字 




对已有表增加主键时不能 有auto_increment属性，创表时OK,
1. alter table Student add primary key(s_id) auto_increment;  不成功？

2.创新表时设主键及自增后不能删主键
alter table Student drop primary key;  不成功？

表的别名无法带出字段？时ok时ng
2.


SELECT DISTINCT st.* FROM teacher t, course c, score s, student st 
	WHERE  t.t_id=c.t_id AND c.c_id=s.`c_id` AND s.`s_id`=st.s_id AND t.t_name<>'张三'


Day17
面向对象编程的六大基本原则之一：依赖倒置原则--》依赖抽象不依赖具体。--解耦
statement
stm.executeUpdate()
stm.executeQuery()	




Day18
文档注释，智能注释
初始化连接池怎么不放在在satatic代码块中？-》初始化时才加载而非类加载时加载，太早了

connectionPool,MyConnection 是框架
jdbcUtil 工具类，Client 是程序员写的



 conn1.close();    //?怎么查看close()重写的方法   MyConnection的子类对象调用的方法

SQLyog 表别名.  自动带出该表的字段？？？
或 输入表的几个首字母，等自动补全全表名？？

 -- 35、查询所有学生的课程及分数情况； 
 #student a    #score b   #course c
     SELECT a.s_id,a.s_name,
        	SUM(CASE c.c_name WHEN '语文' THEN b.s_score ELSE 0 END) AS '语文',
	SUM(CASE c.c_name WHEN '数学' THEN b.s_score ELSE 0 END) AS '数学',
	SUM(CASE c.c_name WHEN '英语' THEN b.s_score ELSE 0 END) AS '英语',
	SUM(b.s_score) AS  '总分'
     FROM student a LEFT JOIN score b ON a.s_id = b.s_id 
	LEFT JOIN course c ON b.c_id = c.c_id 
	GROUP BY a.s_id,a.s_name



  -- 36、查询任何一门课程成绩在70分以上的姓名、课程名称和分数；
 #student a    #score b   #course c
 select a.s_name,c.`c_name`,b.s_score from course c
 left join score b  on c.c_id=b.c_id
 left join student a on a.s_id=b.s_id
 where b.s_score>=70


 -- 42、查询每门功成绩最好的前两名 
        -- 牛逼的写法
    SELECT a.s_id,a.c_id,a.s_score FROM score a
    WHERE (SELECT COUNT(*) FROM score b WHERE b.c_id=a.c_id AND b.s_score>=a.s_score)<=2
   ORDER BY a.c_id

 -- 46、查询各学生的年龄
    -- 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一
 
 SELECT s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') 
              - (CASE WHEN DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') THEN 0 ELSE 1 END)) 
 AS age FROM student;

 -- 47、查询本周过生日的学生
    SELECT * FROM student WHERE WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)


 -- 49、查询本月过生日的学生
    select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)


Day19

设置字符集和运行使用参数元数据	
url=jdbc:mysql:///day17?characterEncoding=UTF8&generateSimpleParameterMetadata=true

尽量少用创建类的静态方法--》生命周期包含在整个项目中，占用内存时间久

2.注解


@Override:标记下面的方法一定是重写的方法


@Deprecated:标记下面的方法已经过时了


@FunctionalInterface:标记下面的接口一定是函数式接口。(有且仅有一个抽象方法)



JUnit4通过注解的方式来识别测试方法。目前支持的主要注解有：
@BeforeClass 全局只会执行一次，而且是第一个运行
@Before 在测试方法运行之前运行
@Test 测试方法
@After 在测试方法运行之后允许
@AfterClass 全局只会执行一次，而且是最后一个运行
@Ignore 忽略此方法




lib ->jar包
resources ->配置文件
domain ->JavaBean类
utils  ->工具类	

查找类中的方法 ：ctrl+shift+alt+n

idea快捷方式
1、Alt+回车 导入包,自动修正
2、Ctrl+N   查找类
3、Ctrl+Shift+N 查找文件
4、Ctrl+Alt+L  格式化代码
5、Ctrl+Alt+O 优化导入的类和包
6、Alt+Insert 生成代码(如get,set方法,构造函数等)
7、Ctrl+E或者Alt+Shift+C  最近更改的代码
8、Ctrl+R 替换文本
9、Ctrl+F 查找文本
10、Ctrl+Shift+Space 自动补全代码
11、Ctrl+空格 代码提示
12、Ctrl+Alt+Space    类名或接口名提示
13、Ctrl+P                   方法参数提示
14、Ctrl+Shift+Alt+N    查找类中的方法或变量
15、Alt+Shift+C          对比最近修改的代码

alt+/ 代码提示



